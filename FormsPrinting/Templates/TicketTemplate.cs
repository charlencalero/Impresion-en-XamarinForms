#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FormsPrinting.Templates
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "4.10.0.442")]
public partial class TicketTemplate : TicketTemplateBase
{

#line hidden

#line 1 "TicketTemplate.cshtml"
public Orden Model { get; set; }

#line default
#line hidden


public override void Execute()
{
WriteLiteral("<!DOCTYPE html>  \n<html");

WriteLiteral(" lang=\"en\"");

WriteLiteral(">  \n<head>\r\n    <link");

WriteLiteral(" rel=\"stylesheet\"");

WriteLiteral(" href=\"ticket.css\"");

WriteLiteral(" />\r\n</head>\n    <body>\n        <table");

WriteLiteral(" class=\"header\"");

WriteLiteral(" style=\" width:300px;\"");

WriteLiteral(">\r\n\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("><h3>INGENIERIA E INFORMATICA KING SOFTWARE SAC</h3></td></tr>\r\n            <tr><" +
"td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">A.H BELLA DURMIENTE MZB LT 19</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">RUC: 2542471256</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("></td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("><h3>FACTURA ELECTRONICA</h3></td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Serie/Numero: ");


#line 16 "TicketTemplate.cshtml"
                                                                 Write(Model.IdOrden);


#line default
#line hidden
WriteLiteral("</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Fecha: 2018-05-18</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Docu: 43679394</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Cliente: ");


#line 19 "TicketTemplate.cshtml"
                                                            Write(Model.Cliente);


#line default
#line hidden
WriteLiteral("</tdcolspan=\"2\"></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Direccion: Jr Hermilio Valdizan 123</td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("></td></tr>\r\n\r\n            <tr>\r\n                <td");

WriteLiteral(" width=\"200\"");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">Producto</td>\r\n                <td");

WriteLiteral(" width=\"100\"");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">Precio</td>\r\n            </tr>\r\n\r\n");


#line 28 "TicketTemplate.cshtml"
            

#line default
#line hidden

#line 28 "TicketTemplate.cshtml"
             foreach (var prod in Model.Productos)
            {


#line default
#line hidden
WriteLiteral("                <tr>\r\n                    <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">");


#line 31 "TicketTemplate.cshtml"
                                           Write(prod.Nombre);


#line default
#line hidden
WriteLiteral("</td>\r\n                    <td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">");


#line 32 "TicketTemplate.cshtml"
                                            Write(prod.Total);


#line default
#line hidden
WriteLiteral("</td>\r\n                </tr>\r\n");


#line 34 "TicketTemplate.cshtml"
            }


#line default
#line hidden
WriteLiteral("\r\n            <tr>\r\n                <td");

WriteLiteral(" class=\"total\"");

WriteLiteral(">Total</td>\r\n                <td");

WriteLiteral(" class=\"precio total\"");

WriteLiteral(">");


#line 38 "TicketTemplate.cshtml"
                                    Write(Model.Total);


#line default
#line hidden
WriteLiteral("</td>\r\n            </tr>\r\n\r\n\r\n\r\n            <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    OP. GRAVADAS S/\r\n                </td>\r\n                <t" +
"d");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    4.24\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    OP. EXONERADAS S/\r\n                </td>\r\n                " +
"<td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.00\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    OP. INAFECTAS S/\r\n                </td>\r\n                <" +
"td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.00\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    OP. GRATUITA S/\r\n                </td>\r\n                <t" +
"d");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.00\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    I.S.C. S/\r\n                </td>\r\n                <td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.00\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    TOTAL DESCUENTO S/\r\n                </td>\r\n               " +
" <td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.00\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">\r\n                    IGV 18% S/\r\n                </td>\r\n                <td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">\r\n                    0.76\r\n                </td>\r\n            </tr>\r\n          " +
"  <tr>\r\n                <td");

WriteLiteral(" style=\"text-align:left\"");

WriteLiteral(">      TOTAL S/   </td>\r\n                <td");

WriteLiteral(" style=\"text-align:right\"");

WriteLiteral(">   5.00</td>\r\n            </tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("></td></tr>\r\n            <tr><td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral("></td></tr>\r\n            <tr>\r\n                <td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">\r\n                    Valor Resumen : asfksdkhjgfdg76asd990/=\r\n                <" +
"/td>\r\n            </tr>\r\n            <tr>\r\n                <td");

WriteLiteral(" colspan=\"2\"");

WriteLiteral(">\r\n                    Puede visualizar su comprobante en: goo.fg/23fg\r\n         " +
"       </td>\r\n            </tr>\r\n\r\n        </table>\n    \n\t\n    </body>\n</html>  " +
"");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class TicketTemplateBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
